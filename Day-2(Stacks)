//Day-2(Module-26 Stacks)-08/08/2024

//Reverse a Stack- T.C.-O(n), S.C-O(n)


/* public class Stacks {

    public static void pushAtBottom(Stack<Integer> s, int data){
        if(s.isEmpty()){
            s.push(data);
            return;
        }

        int top=s.pop();
        pushAtBottom(s, data);
        s.push(top);
        
    }


    public static void reverseStack(Stack<Integer> s){
    if(s.isEmpty()){
        return;
    }
      int top=s.pop();
      reverseStack(s);  
      pushAtBottom(s,top);

    }

    public static void printStack(Stack<Integer> s){
        while (!s.isEmpty()) {
            System.out.println(s.pop());
        }
        
    }
    public static void main(String[] args) {
        Stack<Integer> s=new Stack<>();
        s.push(1);
        s.push(2);
        s.push(3);

        reverseStack(s);
        printStack(s);

    }
} */


//Stock Span problem

/**
 * Stacks
 */
/* public class Stacks {

    public static void stockSpan(int stocks[],int span[]){
        Stack<Integer> s=new Stack<>();
        span[0]=1;
        s.push(0);

        for(int i=1;i<stocks.length;i++){
            int currPrice=stocks[i];
            while (!s.isEmpty() && currPrice>stocks[s.peek()]) {
                s.pop();
            }
            if(s.isEmpty()){
                span[i]=i+1;
            }else{
                int prevHigh=s.peek();
                span[i]=i-prevHigh;
            }
            s.push(i);
        }
    }

    public static void main(String[] args) {
        int stocks[]={100,80,60,70,60,85,100};
        int [] span=new int[stocks.length];

        stockSpan(stocks,span);

        for(int i=0;i<span.length;i++){
            System.out.print(span[i]+" ");
        }
    }
} */


//Next Greater right element--T.C-O(n);

/**
 * Stacks
 */
/* public class Stacks {

    public static void main(String[] args) {
        int arr[]={6,8,0,1,3};
        int nxtGreater[]= new int[arr.length];
        Stack<Integer> s=new Stack<>();

        for(int i=arr.length-1;i>=0;i--){
            //step-1 while loop
            while (!s.empty() && arr[s.peek()]<=arr[i]) {
                s.pop();
            }
            //step-2 if else
            if(s.isEmpty()){
                nxtGreater[i]=-1;
            }else{
                nxtGreater[i]=arr[s.peek()];
            }

            //step-3 push 
            s.push(i);
        }

        for(int i=0;i<nxtGreater.length;i++){
            System.out.print(nxtGreater[i]+" ");
        }
        System.out.println();
    }
} */

