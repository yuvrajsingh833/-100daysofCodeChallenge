//#100daysofcodechallenge

//Day-1(Module-26 Stacks)--07/08/2024

//Implementation of stack using ArrayList

import java.util.*;

/* public class Stacks {
    static class Stack{
        static ArrayList<Integer> list=new ArrayList<>();
    
        //isEmpty
        public static boolean isEmpty(){
            return list.size()==0;
        }

        //push
        public static void push(int data){
            list.add(data);
        }

        //pop
        public static int pop(){
            if (isEmpty()) {
               return -1; 
            }
            int top=list.get(list.size()-1);
            list.remove(list.size()-1);
            return top;
        }

        //peek

        public static int peek(){
            if (isEmpty()) {
                return -1;
            }
            int top=list.get(list.size()-1);
            return top;
        }

    }
    public static void main(String[] args) {

        Stack s=new Stack();
        s.push(1);
        s.push(2);
        s.push(3);


        while (!s.isEmpty()) {
            System.out.println(s.peek());
            s.pop();
        }       
    }
} */



//Stack using Linked List

/* public class Stacks {
    static class Node{
        int data;
        Node next;
        Node(int data){
            this.data=data;
            this.next=null;
        }
    }
    
    static class Stack{
        static Node head=null;

        //isEmpty
        public static boolean isEmpty(){
            return head==null;
        }

        //push 
        public static void push(int data){
            Node newNode=new Node(data);
            if(isEmpty()){
                head=newNode;
                return;
            }
            newNode.next=head;
            head=newNode;
        }

        //pop
        public static int pop(){
            if (isEmpty()) {
                return -1;
            }
            int top=head.data;
            head=head.next;
            return top;
        }

        //peek
        public static int peek(){
            if(isEmpty()){
                return -1;
            }
           return head.data;
        }
        

    }

    public static void main(String[] args) {
        Stack s=new Stack();
        s.push(01);
        s.push(2);
        s.push(3);

        while(!s.isEmpty()){
            System.out.println(s.peek());
            s.pop();
        }
    }
} */

// Stack using Java Collection Framework


/* public class Stacks {

    public static void main(String[] args) {
        Stack<Integer> s=new Stack<>();
        s.push(1);
        s.push(2);
        s.push(3);
        s.push(4);
       while (!s.isEmpty()) {
            System.out.println(s.peek());
            s.pop();
       }


    }
} */

//Push element at end of the stack-- T.C.-O(n);


/* public class Stacks {

    public static void pushAtBottom(Stack<Integer> s, int data){
        if(s.isEmpty()){
            s.push(data);
            return;
        }

        int top=s.pop();
        pushAtBottom(s, data);
        s.push(top);
        
    }

    public static void main(String[] args) {
        Stack<Integer> s=new Stack<>();
        s.push(1);
        s.push(2);
        s.push(3);

        pushAtBottom(s,4);

        while (!s.isEmpty()) {
            System.out.println(s.pop());
        }
    }
    
} */


//Reverse a String using Stack
/**
 * Stacks
 */
/* public class Stacks {

    public static String reverseString(String str){
        Stack<Character> s=new Stack<>();

        //pushing charcter of string
        int idx=0;
        while (idx<str.length()) {
            s.push(str.charAt(idx));
            idx++;
        }

        //poping charter from the stack

        StringBuilder sb=new StringBuilder("");

        while (!s.isEmpty()) {
            char curr=s.pop();
            sb.append(curr);
        }

        return sb.toString();


    }
    public static void main(String[] args) {
        String str="abc";
        String result=reverseString(str);
        System.out.println(result);
    }
} */
